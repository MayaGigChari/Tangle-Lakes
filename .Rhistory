title = "Length Distribution with Error By Gear Type"
) +
theme_minimal()+
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
plot.margin = margin(10, 20, 20, 20)
)+
facet_wrap(~gear_type_filtered)
total_data
summary(total_data)
#this is also considering the two floys that moved into lower.
shallow_round_lake_data<- total_data%>%
filter(lake_combined == "Shallow_Round" | Floy %in% c("19970", "18608"))
shallow_round_lake_data$lake_combined = "Shallow_Round"
shallow_round_lake_data_floys<-shallow_round_lake_data%>%
select(Floy)%>%
filter(!is.na(Floy))
floys_shallow_round<-df_long%>%
filter(Floy %in% shallow_round_lake_data_floys$Floy)
plotly::ggplotly(
ggplot(floys_shallow_round, aes(x = Date, y = length, group = Floy, color = factor(Floy))) +
geom_point()+
geom_line() +
labs(title = "Fish Length over time Shallow Lake", x = "Date", y = "Length (cm)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_discrete(name = "Fish ID") +
theme_bw()+
theme(legend.position = "none")
)
floys_shallowround_change
floys_shallowround_change <-floys_shallow_round %>%
group_by(Floy) %>%
arrange(length_id) %>%
reframe(
expand_grid(i = row_number(), j = row_number()) %>%
filter(i < j) %>% #avoids repetition and i = j case.
mutate(
length_1 = length[i],
length_2 = length[j],
Date_cap = Date[i],
Date_recap = Date[j],
change_length = length_2 - length_1
) %>%
select(Date_cap, Date_recap, change_length,cap_length = length_1, recap_length = length_2, change_length)
)
shallow_round_ttest<- t.test(as.integer(floys_shallowround_change$recap_length),as.integer(floys_shallowround_change$cap_length), paired = TRUE )
shallow_round_ttest
shallow_round_growth_ttest <- tibble(
p_value = shallow_round_ttest$p.value,
t_statistic = shallow_round_ttest$statistic,
df = shallow_round_ttest$parameter,
conf_int_low = shallow_round_ttest$conf.int[1],
conf_int_high = shallow_round_ttest$conf.int[2],
)
shallowround_growth_regression<- ggplot(floys_shallowround_change, aes(x = cap_length, y = change_length))+
geom_point(color = "red", size = 4)+
geom_smooth(method = lm)
shallowround_growth_regression
shallowround_growth_lm<- lm(floys_shallowround_change$change_length~ floys_shallowround_change$cap_length)
summary(shallowround_growth_lm)
shallow_round_lake_data_n2
shallow_round_lake_data_m2
shallow_round_lake_data_non2
shallow_round_lake_data_m2<- left_join(shallow_round_lake_data_m2, floys_shallowround_change, join_by(Floy))%>%
select(-c(Date_cap, Date_recap, change_length, recap_length), corrected_length = cap_length)
shallow_round_lake_data_non2$corrected_length<- as.numeric(shallow_round_lake_data_non2$Fork_length)
corrected_Fork_length<- sapply(as.numeric(shallow_round_lake_data_n2$Fork_length),length_correction, shallowround_growth_lm)
shallow_round_lake_data_n2$corrected_length<- corrected_Fork_length
corrected_shallow_round_lake_data<- shallow_round_lake_data_non2%>%
bind_rows(shallow_round_lake_data_n2)%>%
bind_rows(shallow_round_lake_data_m2)
corrected_shallow_round_lake_data
min_size_capture<- shallow_round_lake_data%>%
filter(Date < "2024-01-01")%>%
filter(!is.na(Fork_length))%>%
summarize(
min = min(as.numeric(Fork_length))
)
#this removes a significant number of tuples from the data, although half of them are within event recaps anyways and were removed because NA < 300.
corrected_shallow_round_lake_data_truncated<- corrected_shallow_round_lake_data%>%
filter(corrected_length>= 300)
tuples_removed<- anti_join(corrected_shallow_round_lake_data, corrected_shallow_round_lake_data_truncated)
corrected_shallow_round_lake_data_truncated
library(tidyverse)
shallow_round_lake_data_n2
#this removes a significant number of tuples from the data, although half of them are within event recaps anyways and were removed because NA < 300.
corrected_shallow_round_lake_data_truncated<- corrected_shallow_round_lake_data%>%
filter(corrected_length>= 300)
tuples_removed<- anti_join(corrected_shallow_round_lake_data, corrected_shallow_round_lake_data_truncated)
shallow_round_lake_data_nowithineven<- shallow_round_lake_data%>%
filter(stat%in%c("m2", "n2", "n1"))
corrected_shallow_round_lake_data_truncated_nowthinevent<- corrected_shallow_round_lake_data_truncated%>%
filter(stat%in%c("m2", "n2", "n1"))
ecdf_plot_nocorrection_shallowround<-ggplot(shallow_round_lake_data_nowithineven, aes(x = as.numeric(Fork_length), color = grouping)) +
stat_ecdf(geom = "step") +  # ECDF with step lines
labs(x = "length", y = "CDF", color = "Group", title = "m2-length original ECDF Shallow-Round") +
theme_minimal()
ecdf_plot_nocorrection_shallowround
ecdf_plot_withcorrection_shallowround<-ggplot(corrected_shallow_round_lake_data_truncated_nowthinevent, aes(x = as.numeric(corrected_length), color = grouping)) +
stat_ecdf(geom = "step") +  # ECDF with step lines
labs(x = "length", y = "CDF", color = "Group", title = "m2-length corrected ECDF Shallow-Round") +
theme_minimal()
ecdf_plot_withcorrection_shallowround
shallow_round_ks_nocorrection<- ks_test(shallow_round_lake_data_nowithineven, events_list, "Shallow-Round", length_variable = "Fork_length" )
shallow_round_ks_withcorrection<- ks_test(corrected_shallow_round_lake_data_truncated_nowthinevent, events_list, "Shallow-Round", length_variable = "corrected_length")
shallow_round_ks_nocorrection<- ks_test(shallow_round_lake_data_nowithineven, events_list, "Shallow-Round", length_variable = "Fork_length" )
shallow_round_ks_nocorrection
shallow_round_ks_withcorrection
data_full<- read.csv("Total_data_corrected_lengths.csv")
data_full_shallowround<- data_full %>%
filter(lake_combined == "Shallow_Round")%>%
filter(cap_label %in% events_list)
#first let's look at the ecdf without truncating the distribution.
ecdf_plot_withcorrection_shallowround_full_regression<-ggplot(data_full_shallowround, aes(x = as.numeric(Fork_length), color = grouping)) +
stat_ecdf(geom = "step") +  # ECDF with step lines
labs(x = "length", y = "CDF", color = "Group", title = "m2-length corrected ECDF Shallow-Round using full regression, no min-truncation") +
theme_minimal()
ecdf_plot_withcorrection_shallowround_full_regression
data_full_shallowround
ecdf_plot_withcorrection_shallowround_full_regression
#Now let's truncate to the minimum captured size in event 1, which as we said above is min_size_capture_shallowround
data_full_shallowround%>%
filter(grouping == "n2")%>%
summarize(
min = min(as.numeric(Fork_length))
)
#we keep fewer allowable fish using the full regression than just the shallow-round regression
data_full_shallowround_truncated<- data_full_shallowround%>%
filter(corrected_length>= min_size_capture_shallowround$min)
##THIS IS IMPORTANT and we will use it a lot.
min_size_capture_shallowround<- shallow_round_lake_data%>%
filter(Date < "2024-01-01")%>%
filter(!is.na(Fork_length))%>%
summarize(
min = min(as.numeric(Fork_length))
)
#we keep fewer allowable fish using the full regression than just the shallow-round regression
data_full_shallowround_truncated<- data_full_shallowround%>%
filter(corrected_length>= min_size_capture_shallowround$min)
ecdf_plot_withcorrection_shallowround_full_regression_truncated<-ggplot(data_full_shallowround_truncated, aes(x = as.numeric(corrected_length), color = grouping)) +
stat_ecdf(geom = "step") +  # ECDF with step lines
labs(x = "length", y = "CDF", color = "Group", title = "m2-length corrected ECDF Shallow-Round using full regression, with min-truncation") +
theme_minimal()
ecdf_plot_withcorrection_shallowround_full_regression_truncated
events_list = c("n1", "n2", "m2")
shallow_round_ks_nocorrection<- ks_test(data_full_shallowround, events_list, "Shallow-Round", length_variable = "Fork_length" )
shallow_round_ks_withcorrection<- ks_test(data_full_shallowround_truncated, events_list, "Shallow-Round", length_variable = "corrected_length")
shallow_round_ks_nocorrection
shallow_round_ks_withcorrection
data_full_shallowround_n1n2<- data_full_shallowround%>%
filter(grouping %in% c("n1", "n2"))
data_full_shallowround_n1n2 <- data_full_shallowround_n1n2 %>%
mutate(Year_capped = year(Date))
shallow_round_continuous_viz<- plot_length_dist_continuous(data_full_shallowround_n1n2, lakeSystem = "Shallow-Round")
shallow_round_continuous_viz
#bin the lengths
data_full_shallowround_n1n2_binned<- assign_bins(data_full_shallowround_n1n2)
shallowround_length_stats_bothyears<- binned_length_statistics(data_full_shallowround_n1n2_binned)
#the preservation needs to happen here.
shallowround_length_stats_2023<- binned_length_statistics(data_full_shallowround_n1n2_binned, yearSort = TRUE, year = 2023)
shallowround_length_stats_2024<- binned_length_statistics(data_full_shallowround_n1n2_binned, yearSort = TRUE, year = 2024)
shallowround_length_stats_bothyears_plot<- plot_length_binnedWithError(shallowround_length_stats_bothyears)
shallowround_length_stats_bothyears_plot
shallowround_length_stats_2023_plot<- plot_length_binnedWithError(shallowround_length_stats_2023)
shallowround_length_stats_2023_plot
shallowround_length_stats_2024_plot<- plot_length_binnedWithError(shallowround_length_stats_2024)
shallowround_length_stats_2024_plot
wl.lin <- lm_lw(data_full_shallowround_n1n2)
summary(wl.lin)
coef(wl.lin)
wl.lin.sigma <- sigma(wl.lin)
wl.lin.sigma
# ln(alpha)
wl.lin.ln_alpha <- as.numeric(coef(wl.lin)[1])
# alpha (mean-unbiased)# this is from the fish 622 course.
wl.lin.alpha <- exp(wl.lin.ln_alpha)*exp((wl.lin.sigma^2)/2)
# Beta
wl.lin.beta <- as.numeric(coef(wl.lin)[2])
wl.lin.beta
# Lets plot the model fit
plot_wl(data=data_full_shallowround_n1n2, alpha=wl.lin.alpha, beta=wl.lin.beta)
data_full_shallowround
#make a copy
data_full_shallowround_ld_copy<- data_full_shallowround
#do the assignment
data_full_shallowround_ld_copy$Fork_length<- data_full_shallowround_ld_copy$corrected_length
data_full_shallowround_n1n2_corrected<- data_full_shallowround_ld_copy%>%
filter(grouping %in% c("n1", "n2"))
data_full_shallowround_n1n2_corrected<- data_full_shallowround_n1n2_corrected %>%
mutate(Year_capped = year(Date))
shallow_round_continuous_viz_correct<- plot_length_dist_continuous(data_full_shallowround_n1n2_corrected, lakeSystem = "Shallow-Round")
shallow_round_continuous_viz_correct$full_distribution_bothyears
#let's look at the total combined distribution
shallow_round_continuous_viz_correct$full_distribution
shallow_round_continuous_viz_correct$full_distribution_years_sep
#bin the lengths
data_full_shallowround_n1n2_corrected_binned<- assign_bins(data_full_shallowround_n1n2_corrected)
#one na.
shallowround_length_stats_bothyears_corrected<- binned_length_statistics(data_full_shallowround_n1n2_corrected_binned)
#the na is exisitng in the bins category.
#the preservation needs to happen here.
shallowround_length_stats_2023_corrected<- binned_length_statistics(data_full_shallowround_n1n2_corrected_binned, yearSort = TRUE, year = 2023)
shallowround_length_stats_2024_corrected<- binned_length_statistics(data_full_shallowround_n1n2_corrected_binned, yearSort = TRUE, year = 2024)
shallowround_length_stats_bothyears_plot_corrected<- plot_length_binnedWithError(shallowround_length_stats_bothyears_corrected)
shallowround_length_stats_2023_plot_corrected<- plot_length_binnedWithError(shallowround_length_stats_2023_corrected)
shallowround_length_stats_2024_plot_corrected<- plot_length_binnedWithError(shallowround_length_stats_2024_corrected)
data_full_shallowround_truncated
data_full_shallowround_trunc_copy<- data_full_shallowround_truncated
#do the assignment
data_full_shallowround_trunc_copy$Fork_length<- data_full_shallowround_trunc_copy$corrected_length
data_full_shallowround_n1n2_corrected_trunc<- data_full_shallowround_trunc_copy%>%
filter(grouping %in% c("n1", "n2"))
data_full_shallowround_n1n2_corrected_trunc<- data_full_shallowround_n1n2_corrected_trunc %>%
mutate(Year_capped = year(Date))
shallow_round_continuous_viz_trunc<- plot_length_dist_continuous(data_full_shallowround_n1n2_corrected_trunc, lakeSystem = "Shallow-Round")
shallow_round_continuous_viz_trunc$full_distribution_bothyears
#let's look at the total combined distribution
shallow_round_continuous_viz_trunc$full_distribution
#we really mess up the 2024 distribution when we truncate it to fit 2023. (really for this it would be an "extension" of the 2023 data. )
shallow_round_continuous_viz_trunc$full_distribution_years_sep
#bin the lengths
data_full_shallowround_n1n2_trunc_binned<- assign_bins(data_full_shallowround_n1n2_corrected_trunc)
#one na.
shallowround_length_stats_bothyears_trunc<- binned_length_statistics(data_full_shallowround_n1n2_trunc_binned)
shallowround_length_stats_2023_corrected_trunc<- binned_length_statistics(data_full_shallowround_n1n2_trunc_binned, yearSort = TRUE, year = 2023)
shallowround_length_stats_2024_corrected_trunc<- binned_length_statistics(data_full_shallowround_n1n2_trunc_binned, yearSort = TRUE, year = 2024)
shallowround_length_stats_bothyears_plot_corrected_trunc<- plot_length_binnedWithError(shallowround_length_stats_bothyears_trunc)
shallowround_length_stats_2023_plot_corrected_trunc<- plot_length_binnedWithError(shallowround_length_stats_2023_corrected_trunc)
shallowround_length_stats_2024_plot_corrected_trunc<- plot_length_binnedWithError(shallowround_length_stats_2024_corrected_trunc)
shallowround_length_stats_2024_plot_corrected_trunc
shallowround_length_stats_2023_plot_corrected_trun
shallowround_length_stats_2023_plot_corrected_trunc
shallowround_length_stats_bothyears_plot_corrected_trunc
#this is not correct. this just gets all the n1s and the recaps, not the n2s.
#this has way fewer things than the original dataset. I don't know why.
#this dataset filters out the redundancy, so it should not be used for the peterson estimate.
sf_df_nounk <- sf_df %>%
filter(Floy != "UNK" | is.na(Floy))
sf_df_stat_count<- sf_df%>%
group_by(Floy)%>%
count
sf_df_stat_count
#need to go by stats now.
sf_df_shallowround_r1<- st_crop(sf_df_nounk, shallowround_lake_region_1)
sf_df_shallowround_r1$region<-1
sf_df_shallowround_r2<- st_crop(sf_df_nounk, shallowround_lake_region_2)
sf_df_shallowround_r2$region<-2
sf_df_shallowround_r3<- st_crop(sf_df_nounk, shallowround_lake_region_3)
sf_df_shallowround_r3$region<-3
sf_df_shallowround_regions<- sf_df_shallowround_r1%>%
rbind(sf_df_shallowround_r2)%>%
rbind(sf_df_shallowround_r3)
#total of 255. double check against this
sf_df_nounk_shallowround<- sf_df_nounk%>%
filter(Lake %in% c("Shallow", "Round"))%>%
count()
sf_df_nounk_shallowround
test1<- chi2_markrecap(tibble(sf_df_shallowround_regions))
pet_diag_1<- chisq.test(test1)
pet_diag_1
### TEST FOR EQUAL PROBABILITY OF CAPTURE IN EVENT 1 AND EVENT 2
ret<- petersen_consistency(tibble(sf_df_shallowround_regions), region)
ret$complete_mixing_table
ret
ret$consistency_p_values
ret_corrected<- petersen_consistency(tibble(sf_df_shallowround_regions%>%filter(corrected_length >= min_size_capture_shallowround$min)), region)
ret_corrected$consistency_p_values
shallow_round_lake_data%>%
filter(!is.na(Fork_length))%>%
summarize(
min = min(Fork_length)
)
shallow_round_lake_data_nomorts<- shallow_round_lake_data%>%
filter(stat == grouping)%>%
filter(cap_label %in% c("n1", "n2", "m2"))
shallow_round_lake_data_nomovers<- shallow_round_lake_data_nomorts%>%
filter(!Floy %in% c("19970", "18608"))
shallow_round_lake_data_nomovers
####however, these pop estimates do not consider the 2023 allowable catch size. Let's now use our corrected length dataset to filter for that.
####Below is the final pop estimate with the corrected length dataset.
#we use the truncated dataset defined above
data_full_shallowround_truncated
data_full_shallowround_truncated_pop<- data_full_shallowround_truncated%>%
filter(stat == grouping)%>%
filter(cap_label %in% c("n1", "n2", "m2"))
petersen_estimate_trunc<- pop_calc(petersen_funcs,  data_full_shallowround_truncated_pop)
Chapman_estimate_trunc<- pop_calc(Chapman_funcs, data_full_shallowround_truncated_pop)
bailey_estimate_trunc<- pop_calc(Bailey_funcs, data_full_shallowround_truncated_pop)
#there were two fish caught in shallow that moved to lower. let's look at these.
check<- shallow_round_lake_data%>%
filter(stat == grouping)%>%
filter(cap_label %in% c("n1", "n2", "m2"))
chec
check
total_data
summary(total_data)
#this is also considering the two floys that moved into shallowround.
Upper_lake_data<- total_data%>%
filter(lake_combined == "Shallow_Round" | Floy %in% c("19970", "18608"))
#this is also considering the two floys that moved into shallowround.
Upper_lake_data<- total_data%>%
filter(lake_combined == "Upper")
#this is also considering the two floys that moved into shallowround.
Upper_lake_data<- total_data%>%
filter(lake_combined == "Upper")
Upper_lake_data
Upper_lake_data_floys<-Upper_lake_data%>%
select(Floy)%>%
filter(!is.na(Floy))
Upper_lake_data_floys
floys_upper<-df_long%>%
filter(Floy %in% Upper_lake_data_floys$Floy)
floys_upper
ggsave("fish_growth_upper.png",
height = 12,  # Adjust the height (in inches)
width = 6,    # Adjust the width (in inches)
dpi = 300)
plotly::ggplotly(
ggplot(floys_upper, aes(x = Date, y = length, group = Floy, color = factor(Floy))) +
geom_point()+
geom_line() +
labs(title = "Fish Length over time Shallow Lake", x = "Date", y = "Length (cm)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_discrete(name = "Fish ID") +
theme_bw()+
theme(legend.position = "none")
)
ggsave("fish_growth_upper.png",
height = 12,  # Adjust the height (in inches)
width = 6,    # Adjust the width (in inches)
dpi = 300)
##THIS IS IMPORTANT and we will use it a lot.
min_size_capture_Upper<- Upper_lake_data%>%
filter(Date < "2024-01-01")%>%
filter(!is.na(Fork_length))%>%
summarize(
min = min(as.numeric(Fork_length))
)
min_size_capture_Upper
data_full<- read.csv("Total_data_corrected_lengths.csv")
data_full_Upper<- data_full %>%
filter(lake_combined == "Upper")%>%
filter(cap_label %in% events_list)
data_full_Upper
#first let's look at the ecdf without truncating the distribution.
ecdf_plot_withcorrection_Upper_full_regression<-ggplot(data_full_Upper, aes(x = as.numeric(Fork_length), color = grouping)) +
stat_ecdf(geom = "step") +  # ECDF with step lines
labs(x = "length", y = "CDF", color = "Group", title = "m2-length corrected ECDF Shallow-Round using full regression, no min-truncation") +
theme_minimal()
ecdf_plot_withcorrection_Upper_full_regression
#first let's look at the ecdf without truncating the distribution.
ecdf_plot_withcorrection_Upper_full_regression<-ggplot(data_full_Upper, aes(x = as.numeric(Fork_length), color = grouping)) +
stat_ecdf(geom = "step") +  # ECDF with step lines
labs(x = "length", y = "CDF", color = "Group", title = "m2-length corrected ECDF Upper using full regression, no min-truncation") +
theme_minimal()
ggsave("ecdf_plot_withcorrection_Upper_full_regression.png", ecdf_plot_withcorrection_shallowround_full_regression, dpi = 300)
#we keep fewer allowable fish using the full regression than just the shallow-round regression
data_full_upper_truncated<- data_full_upper%>%
filter(corrected_length>= min_size_capture_upper$min)
ecdf_plot_withcorrection_upper_full_regression_truncated<-ggplot(data_full_upper_truncated, aes(x = as.numeric(corrected_length), color = grouping)) +
stat_ecdf(geom = "step") +  # ECDF with step lines
labs(x = "length", y = "CDF", color = "Group", title = "m2-length corrected ECDF Shallow-Round using full regression, with min-truncation") +
theme_minimal()
#we keep fewer allowable fish using the full regression than just the shallow-round regression
data_full_upper_truncated<- data_full_upper%>%
filter(corrected_length>= min_size_capture_upper$min)
#we keep fewer allowable fish using the full regression than just the shallow-round regression
data_full_upper_truncated<- data_full_Upper%>%
filter(corrected_length>= min_size_capture_upper$min)
#we keep fewer allowable fish using the full regression than just the shallow-round regression
data_full_Upper_truncated<- data_full_Upper%>%
filter(corrected_length>= min_size_capture_Upper$min)
ecdf_plot_withcorrection_Upper_full_regression_truncated<-ggplot(data_full_Upper_truncated, aes(x = as.numeric(corrected_length), color = grouping)) +
stat_ecdf(geom = "step") +  # ECDF with step lines
labs(x = "length", y = "CDF", color = "Group", title = "m2-length corrected ECDF Shallow-Round using full regression, with min-truncation") +
theme_minimal()
ecdf_plot_withcorrection_Upper_full_regression_truncated
ecdf_plot_withcorrection_Upper_full_regression
ecdf_plot_withcorrection_Upper_full_regression_truncated
ggsave("ecdf_plot_withcorrection_Upper_full_regression_truncated.png", ecdf_plot_withcorrection_Upper_full_regression_truncated, dpi = 300)
Upper_ks_nocorrection<- ks_test(data_full_Upper, events_list, "Shallow-Round", length_variable = "Fork_length" )
Upper_ks_withcorrection<- ks_test(data_full_Upper_truncated, events_list, "Shallow-Round", length_variable = "corrected_length")
Upper_ks_nocorrection
Upper_ks_withcorrection
Upper_ks_nocorrection<- ks_test(data_full_Upper, events_list, "Upper", length_variable = "Fork_length" )
Upper_ks_withcorrection<- ks_test(data_full_Upper_truncated, events_list, "Upper", length_variable = "corrected_length")
Upper_ks_nocorrection
data_full_Upper_n1n2<- data_full_Upper%>%
filter(grouping %in% c("n1", "n2"))
data_full_Upper_n1n2 <- data_full_Upper_n1n2 %>%
mutate(Year_capped = year(Date))
data_full_Upper_n1n2
Upper_continuous_viz<- plot_length_dist_continuous(data_full_Upper_n1n2, lakeSystem = "Shallow-Round")
Upper_continuous_viz$full_distribution
Upper_continuous_viz$full_distribution_bothyears
Upper_continuous_viz$full_distribution_years_sep
data_full_Upper_n1n2<- data_full_Upper%>%
filter(grouping %in% c("n1", "n2"))
data_full_Upper_n1n2 <- data_full_Upper_n1n2 %>%
mutate(Year_capped = year(Date))
data_full_Upper_n1n2
Upper_continuous_viz<- plot_length_dist_continuous(data_full_Upper_n1n2, lakeSystem = "Shallow-Round")
#bin the lengths
data_full_Upper_n1n2_binned<- assign_bins(data_full_Upper_n1n2)
Upper_length_stats_bothyears<- binned_length_statistics(data_full_Upper_n1n2_binned)
#the preservation needs to happen here.
Upper_length_stats_2023<- binned_length_statistics(data_full_Upper_n1n2_binned, yearSort = TRUE, year = 2023)
Upper_length_stats_2024<- binned_length_statistics(data_full_Upper_n1n2_binned, yearSort = TRUE, year = 2024)
Upper_length_stats_bothyears
Upper_length_stats_2023
Upper_length_stats_2024
Upper_length_stats_bothyears_plot<- plot_length_binnedWithError(Upper_length_stats_bothyears)
Upper_length_stats_bothyears_plot
Upper_length_stats_2023_plot<- plot_length_binnedWithError(Upper_length_stats_2023)
Upper_length_stats_2023_plot
Upper_length_stats_2024_plot<- plot_length_binnedWithError(Upper_length_stats_2024)
Upper_length_stats_2024_plot
wl.lin <- lm_lw(data_full_Upper_n1n2)
summary(wl.lin)
wl.lin <- lm_lw(data_full_Upper_n1n2)
data_full_Upper_n1n2
lm_lw<- function(dataz)
{
wl.lin <- lm(log(Weight) ~ log(as.numeric(Fork_length)), data=dataz)
return(wl.lin)
}
wl.lin <- lm_lw(data_full_Upper_n1n2%>%drop_na(Fork_length))
wl.lin <- lm_lw(data_full_Upper_n1n2%>%drop_na(Fork_length, Weight))
wl.lin <- lm_lw(data_full_Upper_n1n2%>%drop_na(Fork_length, weight))
data_full_Upper_n1n2
lm(log(Weight) ~ log(as.numeric(Fork_length)), data=data_full_Upper_n1n2)
log(as.numeric(data_full_Upper_n1n2$Fork_length))
lm(log(as.numeric(Weight)) ~ log(as.numeric(Fork_length)), data=dataz)
lm(log(as.numeric(Weight)) ~ log(as.numeric(Fork_length)), data=data_full_Upper_n1n2)
log(as.numeric(data_full_Upper_n1n2$Weight))
data_full_Upper_n1n2$Weight
wl.lin <- lm_lw(data_full_Upper_n1n2%>%drop_na(Fork_length)%>%filter(Weight >0))
summary(wl.lin)
coef(wl.lin)
wl.lin.sigma <- sigma(wl.lin)
wl.lin.sigma
# ln(alpha)
wl.lin.ln_alpha <- as.numeric(coef(wl.lin)[1])
# alpha (mean-unbiased)# this is from the fish 622 course.
wl.lin.alpha <- exp(wl.lin.ln_alpha)*exp((wl.lin.sigma^2)/2)
# Beta
wl.lin.beta <- as.numeric(coef(wl.lin)[2])
wl.lin.beta
# Lets plot the model fit
plot_wl(data=data_full_Upper_n1n2, alpha=wl.lin.alpha, beta=wl.lin.beta)
wl.lin.beta
data_full_Upper
#make a copy
data_full_Upper_ld_copy<- data_full_Upper
#do the assignment
data_full_Upper_ld_copy$Fork_length<- data_full_Upper_ld_copy$corrected_length
data_full_Upper_n1n2_corrected<- data_full_Upper_ld_copy%>%
filter(grouping %in% c("n1", "n2"))
data_full_Upper_n1n2_corrected<- data_full_Upper_n1n2_corrected %>%
mutate(Year_capped = year(Date))
shallow_round_continuous_viz_correct<- plot_length_dist_continuous(data_full_Upper_n1n2_corrected, lakeSystem = "Shallow-Round")
Upper_continuous_viz_correct<- plot_length_dist_continuous(data_full_Upper_n1n2_corrected, lakeSystem = "Shallow-Round")
Upper_continuous_viz_correct
Upper_continuous_viz_correct$full_distribution_bothyears
#let's look at the total combined distribution
Upper_continuous_viz_correct$full_distribution
UPper_continuous_viz_correct$full_distribution_years_sep
Upper_continuous_viz_correct$full_distribution_years_sep
#bin the lengths
data_full_Upper_n1n2_corrected_binned<- assign_bins(data_full_Upper_n1n2_corrected)
#one na.
Upper_length_stats_bothyears_corrected<- binned_length_statistics(data_full_Upper_n1n2_corrected_binned)
#the na is exisitng in the bins category.
#the preservation needs to happen here.
Upper_length_stats_2023_corrected<- binned_length_statistics(data_full_Upper_n1n2_corrected_binned, yearSort = TRUE, year = 2023)
Upper_length_stats_2024_corrected<- binned_length_statistics(data_full_Upper_n1n2_corrected_binned, yearSort = TRUE, year = 2024)
Upper_length_stats_bothyears_plot_corrected<- plot_length_binnedWithError(Upper_length_stats_bothyears_corrected)
Upper_length_stats_2023_plot_corrected<- plot_length_binnedWithError(Upper_length_stats_2023_corrected)
Upper_length_stats_2024_plot_corrected<- plot_length_binnedWithError(Upper_length_stats_2024_corrected)
Upper_length_stats_bothyears_plot_corrected
Upper_length_stats_bothyears_plot
Upper_length_stats_bothyears_plot_corrected
data_full_Upper_truncated
data_full_Upper_trunc_copy<- data_full_Upper_truncated
#do the assignment
data_full_Upper_trunc_copy$Fork_length<- data_full_Upper_trunc_copy$corrected_length
#now we can proceed with the same analyses as above.
#first we will do some data wrangling and visualization
data_full_Upper_n1n2_corrected_trunc<- data_full_Upper_trunc_copy%>%
filter(grouping %in% c("n1", "n2"))
data_full_Upper_n1n2_corrected_trunc<- data_full_Upper_n1n2_corrected_trunc %>%
mutate(Year_capped = year(Date))
Upper_continuous_viz_trunc<- plot_length_dist_continuous(data_full_Upper_n1n2_corrected_trunc, lakeSystem = "Shallow-Round")
#it only makes sense to look at both years now because the 2024 data has been corrected, so no longer really represents 2024.
#if we look at both years overlayed, we can see that with the correction the 2024 histogram has a maximum density at a much lower fork length.
Upper_continuous_viz_trunc$full_distribution_bothyears
#let's look at the total combined distribution
Upper_continuous_viz_trunc$full_distribution
#now let's look at the years in separate panels. observe how shifted the data has become.
#we really mess up the 2024 distribution when we truncate it to fit 2023. (really for this it would be an "extension" of the 2023 data. )
Upper_continuous_viz_trunc$full_distribution_years_sep
#bin the lengths
data_full_Upper_n1n2_trunc_binned<- assign_bins(data_full_Upper_n1n2_corrected_trunc)
Upper_length_stats_bothyears_trunc<- binned_length_statistics(data_full_Upper_n1n2_trunc_binned)
Upper_length_stats_2023_corrected_trunc<- binned_length_statistics(data_full_Upper_n1n2_trunc_binned, yearSort = TRUE, year = 2023)
Upper_length_stats_2024_corrected_trunc<- binned_length_statistics(data_full_Upper_n1n2_trunc_binned, yearSort = TRUE, year = 2024)
#make some plots for both years, 2023 and 2024
Upper_length_stats_bothyears_plot_corrected_trunc<- plot_length_binnedWithError(Upper_length_stats_bothyears_trunc)
Upper_length_stats_2023_plot_corrected_trunc<- plot_length_binnedWithError(Upper_length_stats_2023_corrected_trunc)
Upper_length_stats_2024_plot_corrected_trunc<- plot_length_binnedWithError(Upper_length_stats_2024_corrected_trunc)
Upper_length_stats_bothyears_plot_corrected_trunc
Upper_length_stats_bothyears_plot
